// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Users {
  id                  String          @id @default(uuid())
  email               String?         @unique @db.VarChar(100)
  password            String
  full_name           String
  phone               String?         @unique @db.VarChar(20)
  birthday            DateTime
  gender              Gender
  role                Role
  verification        Vertifications?
  avatar_url          String
  code_reset_password String?         @db.VarChar(6)
  refresh_token       String?         @db.VarChar(255)
  is_disable          Boolean         @default(false)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  unaccent            String?         @db.Text
  type_email          TypeEmail       @default(NORMAL)
  Addresses           Address[]
  Orders              Orders[]
  Carts               Carts?
  Reviews             Reviews[]

  @@index([full_name, email, phone], map: "users_fulltext_idx")
}

model Vertifications {
  id            Int     @id @default(autoincrement())
  user_id       String  @unique
  user          Users   @relation(fields: [user_id], references: [id])
  verified_code String
  is_active     Boolean @default(false)
}

model Books {
  id                 String       @id @default(uuid())
  title              String       @db.VarChar(255)
  author             String
  category_id        String
  price              Decimal
  stock_quantity     Int
  description        String       @db.Text
  entry_price        Decimal
  final_price        Decimal?
  discountPercentage Int?
  discountDate       DateTime?
  avg_stars          Decimal      @default(0)
  total_reviews      Int          @default(0)
  sold_quantity      Int          @default(0)
  image_url          String[]     @default([])
  status             BookStatus   @default(ACTIVE)
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
  unaccent           String?      @db.Text
  Category           Category     @relation(fields: [category_id], references: [id])
  OrderItems         OrderItems[]
  CartItems          CartItems[]
  Reviews            Reviews[]

  @@index([title, author], map: "books_fulltext_idx")
}

model Category {
  id         String  @id @default(uuid())
  name       String  @unique
  is_disable Boolean @default(false)
  books      Books[]
  unaccent   String? @db.Text

  @@index([name])
}

model Authors {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  birthday    DateTime
  description String

  @@unique([name, birthday, description])
  @@index([name, description], map: "authors_fulltext_idx")
}

model Orders {
  id             String        @id @default(uuid())
  user_id        String
  user           Users         @relation(fields: [user_id], references: [id])
  status         OrderStatus   @default(PENDING)
  review_state   ReviewState   @default(UNREVIEW)
  total_price    Decimal       @default(0)
  full_name      String
  phone_number   String
  address        String
  pending_at     DateTime
  processing_at  DateTime?
  delivered_at   DateTime?
  cancelled_at   DateTime?
  success_at     DateTime?
  reject_at      DateTime?
  note           String?       @db.Text
  is_paid        Boolean       @default(false)
  payment_url    String?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  payment_method PaymentMethod @default(COD)
  is_deleted     Boolean       @default(false)
  OrderItems     OrderItems[]

  @@index([full_name, phone_number, address], map: "orders_fulltext_idx")
}

model OrderItems {
  id            String      @id @default(uuid())
  order_id      String
  order         Orders      @relation(fields: [order_id], references: [id])
  book_id       String
  book          Books       @relation(fields: [book_id], references: [id])
  review_status ReviewState @default(UNREVIEW)
  review_id     Int?
  review        Reviews?
  quantity      Int
  price         Decimal
  total_price   Decimal
}

model Carts {
  id         Int         @id @default(autoincrement())
  user_id    String      @unique()
  user       Users       @relation(fields: [user_id], references: [id])
  created_at DateTime    @default(now())
  CartItems  CartItems[]
}

model CartItems {
  id         Int      @id @default(autoincrement())
  cart_id    Int
  cart       Carts    @relation(fields: [cart_id], references: [id])
  book_id    String
  book       Books    @relation(fields: [book_id], references: [id])
  quantity   Int
  created_at DateTime @default(now())
}

model Reviews {
  id              Int           @id @default(autoincrement())
  user_id         String
  user            Users         @relation(fields: [user_id], references: [id])
  book_id         String
  book            Books         @relation(fields: [book_id], references: [id])
  title           String
  rating          Decimal
  is_hidden       Boolean       @default(false)
  description     String
  is_disable      Boolean       @default(false)
  state           ReviewState   @default(UNREVIEW)
  reply_review_id Int?
  created_at      DateTime      @default(now())
  ReplyReviews    ReplyReviews?
  order_item_id   String        @unique
  OrderItem       OrderItems    @relation(fields: [order_item_id], references: [id])

  @@index([title, description], map: "reviews_fulltext_idx")
}

model ReplyReviews {
  id         Int      @id @default(autoincrement())
  review_id  Int      @unique
  review     Reviews  @relation(fields: [review_id], references: [id])
  reply      String
  created_at DateTime @default(now())
}

model Address {
  id           Int     @id @default(autoincrement())
  user_id      String
  full_name    String
  phone_number String
  address      String
  unaccent     String? @db.Text
  Users        Users?  @relation(fields: [user_id], references: [id])

  @@index([full_name, address, phone_number], map: "address_fulltext_idx")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
  SUCCESS
  REJECT
}

enum BookStatus {
  INACTIVE
  ACTIVE
}

enum ReviewState {
  UNREVIEW
  REVIEWED
  REPLIED
}

enum PaymentMethod {
  COD
  MOMO
  ZALOPAY
  VNPAY
}

enum ReviewType {
  POSITIVE
  NEGATIVE
  CONSTRUCTIVE
  SPAM
  TOXIC
}

enum TypeEmail {
  NORMAL
  GOOGLE
}
