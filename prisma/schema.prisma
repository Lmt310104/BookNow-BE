// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Users {
  id                  String          @id @default(uuid())
  email               String?         @unique @db.VarChar(100)
  password            String
  full_name           String
  phone               String?         @unique @db.VarChar(20)
  role                Role
  verification        Vertifications?
  code_reset_password String?         @db.VarChar(6)
  refresh_token       String?         @db.VarChar(255)
  is_disable          Boolean         @default(false)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  Orders              Orders[]
  Carts               Carts?
  Reviews             Reviews[]
}

model Vertifications {
  id            Int     @id @default(autoincrement())
  user_id       String  @unique
  user          Users   @relation(fields: [user_id], references: [id])
  verified_code String
  is_active     Boolean @default(false)
}

model Books {
  id                 String         @id @default(uuid())
  title              String         @db.VarChar(255)
  author_id          String
  author             Authors        @relation(fields: [author_id], references: [id])
  category_id        String
  price              Decimal
  stock_quantity     Int
  rating             Decimal
  description        String         @db.Text
  entry_price        Decimal
  final_price        Decimal?
  discountPercentage Int?
  discountDate       DateTime?
  avg_stars          Decimal        @default(0)
  total_reviews      Int            @default(0)
  sold_quantity      Int            @default(0)
  image_url          String[]       @default([])
  status             BookStatus     @default(INSTOCK)
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  Category           Category       @relation(fields: [category_id], references: [id])
  OrderDetails       OrderDetails[]
  CartItems          CartItems[]
  Reviews            Reviews[]
}

model Category {
  id    String  @id @default(uuid())
  name  String  @unique
  books Books[]
}

model Authors {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  birthday    DateTime
  description String
  Books       Books[]

  @@unique([name, birthday, description])
}

model Orders {
  id           Int            @id @default(autoincrement())
  user_id      String
  user         Users          @relation(fields: [user_id], references: [id])
  status       OrderStatus    @default(PENDING)
  total_price  Decimal        @default(0)
  full_name    String
  phone_number String
  address      String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  OrderDetails OrderDetails[]
}

model OrderDetails {
  id          Int     @id @default(autoincrement())
  order_id    Int
  order       Orders  @relation(fields: [order_id], references: [id])
  book_id     String
  book        Books   @relation(fields: [book_id], references: [id])
  quantity    Int
  price       Decimal
  total_price Decimal
}

model Carts {
  id         Int         @id @default(autoincrement())
  user_id    String      @unique()
  user       Users       @relation(fields: [user_id], references: [id])
  created_at DateTime    @default(now())
  CartItems  CartItems[]
}

model CartItems {
  id         Int      @id @default(autoincrement())
  cart_id    Int
  cart       Carts    @relation(fields: [cart_id], references: [id])
  book_id    String
  book       Books    @relation(fields: [book_id], references: [id])
  quantity   Int
  created_at DateTime @default(now())
}

model Reviews {
  id          Int      @id @default(autoincrement())
  user_id     String
  user        Users    @relation(fields: [user_id], references: [id])
  book_id     String
  book        Books    @relation(fields: [book_id], references: [id])
  rating      Decimal
  description String
  created_at  DateTime @default(now())
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

enum BookStatus {
  INSTOCK
  OUTOFSTOCK
  LOWSTOCK
}
